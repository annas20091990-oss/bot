import telebot
import sqlite3
import os
import time
import logging
from flask import Flask
import threading
import io
import datetime  # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render.com
app = Flask(__name__)

@app.route('/')
def health_check():
    return "TrendScope Bot is running", 200

def run_flask():
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port)

print("="*50)
print(f"[{time.strftime('%Y-%m-%d %H:%M:%S')}] –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ TrendScope")
print("="*50)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
TOKEN = os.getenv('TOKEN')
if not TOKEN:
    logger.error("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è TOKEN —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
    exit(1)

bot = telebot.TeleBot(TOKEN)
MANAGER_ID = 5661996565  # ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
def init_db():
    try:
        # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –ë–î
        db_path = os.path.join(os.getcwd(), 'users.db')
        conn = sqlite3.connect(db_path, check_same_thread=False)
        cursor = conn.cursor()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            registered_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            demo_requested BOOLEAN DEFAULT 0
        )
        ''')
        conn.commit()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        return conn, cursor
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {str(e)}")
        raise

try:
    conn, cursor = init_db()
    logger.info(f"–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {cursor.execute('SELECT COUNT(*) FROM users').fetchone()[0]}")
except Exception as e:
    logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {str(e)}")
    exit(1)

@bot.message_handler(commands=['start'])
def start(message):
    user = message.from_user
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute('SELECT 1 FROM users WHERE user_id = ?', (user.id,))
        exists = cursor.fetchone()
        
        if not exists:
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute('''
            INSERT INTO users (user_id, username, first_name, last_name)
            VALUES (?, ?, ?, ?)
            ''', (user.id, user.username, user.first_name, user.last_name))
            conn.commit()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—É
            bot.send_message(
                MANAGER_ID,
                f"üöÄ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å TrendScope!\n"
                f"ID: {user.id}\n"
                f"Username: @{user.username}\n"
                f"–ò–º—è: {user.first_name} {user.last_name}"
            )
            logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.id}")
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute('''
            UPDATE users SET 
                username = ?,
                first_name = ?,
                last_name = ?
            WHERE user_id = ?
            ''', (user.username, user.first_name, user.last_name, user.id))
            conn.commit()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.send_message(
            message.chat.id,
            '<b>TrendScope - –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ –∞–Ω–∞–ª–∏–∑–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞</b> üîç\n\n'
            '‚Ä¢ <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥</b> –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤\n'
            '‚Ä¢ <b>–û—Ü–µ–Ω–∫–∞ –¥–∏–Ω–∞–º–∏–∫–∏</b> –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø—É–±–ª–∏–∫–∞—Ü–∏–π\n'
            '‚Ä¢ <b>–ö–æ–Ω—Ç—Ä–æ–ª—å –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π</b> —á–µ—Ä–µ–∑ 1, 3, 24 —á–∞—Å–∞ –∏ 7 –¥–Ω–µ–π\n\n'
            '<b>–ü–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç—Ä–µ–Ω–¥–∞—Ö:</b>\n'
            '‚Üí –°—Å—ã–ª–∫–∞ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏\n'
            '‚Üí –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏\n'
            '‚Üí –†–∞–Ω–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤\n\n'
            '–°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤–º–µ—Å—Ç–æ —Ä—É—Ç–∏–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.\n\n'
            '<b>–ì–æ—Ç–æ–≤—ã –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É?</b>\n'
            '–ù–∞–ø–∏—à–∏—Ç–µ <b>"–î–ê"</b> –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–µ–º–æ-–≤–µ—Ä—Å–∏–∏.',
            parse_mode='HTML'
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /start: {str(e)}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.message_handler(commands=['stats'])
def send_stats(message):
    if message.from_user.id != MANAGER_ID:
        bot.reply_to(message, "‚ö†Ô∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
        
    try:
        cursor.execute('SELECT COUNT(*) FROM users')
        total_users = cursor.fetchone()[0]
        
        cursor.execute('SELECT COUNT(*) FROM users WHERE demo_requested=1')
        demo_requests = cursor.fetchone()[0]
        
        response = (
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –¥–µ–º–æ: {demo_requests}"
        )
        
        bot.reply_to(message, response)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /stats: {str(e)}")
        bot.reply_to(message, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

@bot.message_handler(commands=['users'])
def send_users_list(message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä
    if message.from_user.id != MANAGER_ID:
        bot.reply_to(message, "‚ö†Ô∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
        
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute('SELECT * FROM users ORDER BY registered_at DESC')
        users = cursor.fetchall()
        
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏")
        
        if not users:
            bot.reply_to(message, "–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return
            
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏
        file_content = "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π TrendScope:\n\n"
        file_content += "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è | Username | –ò–º—è | –§–∞–º–∏–ª–∏—è | –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ | –î–µ–º–æ –∑–∞–ø—Ä–æ—à–µ–Ω–æ\n"
        file_content += "-------------------------------------------------------------------------------\n"
        
        for user in users:
            user_id = user[0]
            username = f"@{user[1]}" if user[1] else "–Ω–µ—Ç"
            first_name = user[2] or "–Ω–µ—Ç"
            last_name = user[3] or "–Ω–µ—Ç"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            reg_date = user[4]
            if reg_date:
                # –ï—Å–ª–∏ –¥–∞—Ç–∞ –≤ —Å—Ç—Ä–æ–∫–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                if isinstance(reg_date, str):
                    # –£–±–∏—Ä–∞–µ–º –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã –µ—Å–ª–∏ –µ—Å—Ç—å
                    reg_date = reg_date.split('.')[0]
                formatted_date = str(reg_date)
            else:
                formatted_date = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            demo_requested = "‚úÖ" if user[5] else "‚ùå"
            
            file_content += f"{user_id} | {username} | {first_name} | {last_name} | {formatted_date} | {demo_requested}\n"
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç–∏
        file_in_memory = io.BytesIO(file_content.encode('utf-8'))
        file_in_memory.seek(0)  # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ø–µ—Ä–µ–º–µ—â–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ –Ω–∞—á–∞–ª–æ
        file_in_memory.name = 'users_list.txt'
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        bot.send_document(
            message.chat.id,
            file_in_memory,
            caption="üìã –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        )
        
        logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –∏–∑ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /users: {str(e)}", exc_info=True)
        bot.reply_to(message, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {str(e)}")

@bot.message_handler(func=lambda m: m.text and m.text.upper().strip() == "–î–ê")
def handle_demo_request(message):
    try:
        user = message.from_user
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute('SELECT 1 FROM users WHERE user_id = ?', (user.id,))
        if not cursor.fetchone():
            bot.send_message(
                message.chat.id,
                "‚ÑπÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start"
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã
        cursor.execute(
            'SELECT demo_requested FROM users WHERE user_id = ?', 
            (user.id,)
        )
        demo_requested = cursor.fetchone()[0]
        
        if not demo_requested:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–µ–º–æ
            cursor.execute('''
            UPDATE users SET demo_requested = 1
            WHERE user_id = ?
            ''', (user.id,))
            conn.commit()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—É –æ –∑–∞–ø—Ä–æ—Å–µ –¥–µ–º–æ
            bot.send_message(
                MANAGER_ID,
                f"üî• –ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–µ–º–æ-–≤–µ—Ä—Å–∏—é!\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username}\n"
                f"ID: {user.id}\n"
                f"–ò–º—è: {user.first_name} {user.last_name}"
            )
            logger.info(f"–ó–∞–ø—Ä–æ—Å –¥–µ–º–æ –æ—Ç: {user.id}")

        bot.send_message(
            message.chat.id,
            "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å! –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è "
            "–¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–µ–º–æ-–≤–µ—Ä—Å–∏–∏."
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –î–ê: {str(e)}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")

def run_bot():
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    while True:
        try:
            user_count = cursor.execute('SELECT COUNT(*) FROM users').fetchone()[0]
            logger.info(f"–°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_count}")
            
            # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
            bot.remove_webhook()
            time.sleep(1)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º long polling
            bot.polling(none_stop=True, interval=3, timeout=25)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞: {str(e)}")
            logger.info("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥...")
            time.sleep(30)

if __name__ == '__main__':
    logger.info(f"–¢–æ–∫–µ–Ω: {'—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if TOKEN else '–ù–ï –ù–ê–ô–î–ï–ù!'}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º HTTP-—Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    flask_thread = threading.Thread(target=run_flask)
    flask_thread.daemon = True
    flask_thread.start()
    
    run_bot()
